[1mdiff --git a/composer.json b/composer.json[m
[1mindex 8d56f6f..c40a5c8 100644[m
[1m--- a/composer.json[m
[1m+++ b/composer.json[m
[36m@@ -1,7 +1,7 @@[m
 {[m
     "name": "silamoney/php-sdk",[m
     "description": "Sila PHP SDK for API Version 0.2",[m
[31m-    "version": "0.2.43-rc",[m
[32m+[m[32m    "version": "0.2.44-rc",[m
     "keywords": ["sila","payments","ach","credit","fintech","finance"],[m
     "type": "library",[m
     "license": "Apache-2.0",[m
[1mdiff --git a/lib/Api/ApiClient.php b/lib/Api/ApiClient.php[m
[1mindex c969134..450aba3 100644[m
[1m--- a/lib/Api/ApiClient.php[m
[1m+++ b/lib/Api/ApiClient.php[m
[36m@@ -30,7 +30,7 @@[m [mclass ApiClient[m
 [m
     private const BASE_URI = 'base_uri';[m
 [m
[31m-    private const USER_AGENT = 'SilaSDK-php / 0.2.43';[m
[32m+[m[32m    private const USER_AGENT = 'SilaSDK-php / 0.2.44';[m
 [m
     /**[m
      * Api Client constructor[m
[1mdiff --git a/lib/Api/SilaApi.php b/lib/Api/SilaApi.php[m
[1mindex 52d7ab2..8f2ee2c 100644[m
[1m--- a/lib/Api/SilaApi.php[m
[1m+++ b/lib/Api/SilaApi.php[m
[36m@@ -106,7 +106,10 @@[m [muse Silamoney\Client\Domain\{[m
     UpdateVirtualAccountMessage,[m
     CloseVirtualAccountMessage,[m
     RequestKYCResponse,[m
[31m-    CreateTestVirtualAccountAchTransactionMessage[m
[32m+[m[32m    CreateTestVirtualAccountAchTransactionMessage,[m
[32m+[m[32m    ApproveWireMessage,[m
[32m+[m[32m    MockWireOutFileMessage,[m
[32m+[m[32m    MockWireOutFileResponse[m
 };[m
 use Silamoney\Client\Security\EcdsaUtil;[m
 [m
[36m@@ -945,6 +948,10 @@[m [mclass SilaApi[m
      * @param string|null $descriptor Optional. Max Length 100[m
      * @param string|null $businessUuid Optional. UUID of a business with an approved ACH name. The format should be a UUID string.[m
      * @param \Silamoney\Client\Domain\AchType|null $processingType Optional. Choice Field[m
[32m+[m[32m     * @param string|null $cardName Optional.[m
[32m+[m[32m     * @param string|null $sourceId Optional.[m
[32m+[m[32m     * @param string|null $destinationId Optional.[m
[32m+[m[32m     * @param string|null $mockWireAccountName Optional.[m
      * @return ApiResponse[m
      */[m
     public function redeemSila([m
[36m@@ -957,7 +964,8 @@[m [mclass SilaApi[m
         AchType $processingType = null,[m
         string $cardName = null,[m
         string $sourceId = null,[m
[31m-        string $destinationId = null[m
[32m+[m[32m        string $destinationId = null,[m
[32m+[m[32m        string $mockWireAccountName = null[m
     ): ApiResponse {[m
         $body = new BankAccountMessage([m
             $userHandle,[m
[36m@@ -970,7 +978,8 @@[m [mclass SilaApi[m
             $processingType,[m
             $cardName,[m
             $sourceId,[m
[31m-            $destinationId[m
[32m+[m[32m            $destinationId,[m
[32m+[m[32m            $mockWireAccountName[m
         );[m
         $path = ApiEndpoints::REDEEM_SILA;[m
         $json = $this->serializer->serialize($body, 'json');[m
[36m@@ -1896,7 +1905,7 @@[m [mclass SilaApi[m
      * @throws ClientException[m
      * @throws Exception[m
      */[m
[31m-    public function retryWebhook(string $eventUuid)//: ApiResponse[m
[32m+[m[32m    public function retryWebhook(string $eventUuid): ApiResponse[m
     {[m
         $body = new RetryWebhookMessage($this->configuration->getAppHandle(), $eventUuid);[m
         $path = ApiEndpoints::RETRY_WEBHOOK;[m
[36m@@ -1906,6 +1915,50 @@[m [mclass SilaApi[m
         return $this->prepareResponse($response);[m
     }[m
 [m
[32m+[m[32m    /**[m
[32m+[m[32m     * This function is used to approve/deny WIRE transaction.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param string $userHandle[m
[32m+[m[32m     * @param string $userPrivateKey[m
[32m+[m[32m     * @param string $transactionId - The transaction id to approve or deny[m
[32m+[m[32m     * @param boolean $approve[m
[32m+[m[32m     * @param string|null $notes - Optional.[m
[32m+[m[32m     * @param string|null $mockWireAccountName - Optional.[m
[32m+[m[32m     * @return ApiResponse[m
[32m+[m[32m     * @throws ClientException[m
[32m+[m[32m     * @throws Exception[m
[32m+[m[32m     */[m
[32m+[m[32m    public function approveWire(string $userHandle, string $userPrivateKey, string $transactionId, $approve, $notes = null, $mockWireAccountName = null): ApiResponse[m
[32m+[m[32m    {[m
[32m+[m[32m        $body = new ApproveWireMessage($this->configuration->getAppHandle(), $userHandle, $transactionId, $approve, $notes, $mockWireAccountName);[m
[32m+[m[32m        $path = ApiEndpoints::APPROVE_WIRE;[m
[32m+[m[32m        $json = $this->serializer->serialize($body, 'json');[m
[32m+[m[32m        $headers = $this->makeHeaders($json, $userPrivateKey);[m
[32m+[m[32m        $response = $this->configuration->getApiClient()->callApi($path, $json, $headers);[m
[32m+[m[32m        return $this->prepareResponse($response);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * This function is used to approve/deny WIRE transaction.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param string $userHandle[m
[32m+[m[32m     * @param string $userPrivateKey[m
[32m+[m[32m     * @param string $transactionId - The transaction id to approve or deny[m
[32m+[m[32m     * @param string $wireStatus - Optional.[m
[32m+[m[32m     * @return ApiResponse[m
[32m+[m[32m     * @throws ClientException[m
[32m+[m[32m     * @throws Exception[m
[32m+[m[32m     */[m
[32m+[m[32m    public function mockWireOutFile(string $userHandle, string $userPrivateKey, string $transactionId, $wireStatus): ApiResponse[m
[32m+[m[32m    {[m
[32m+[m[32m        $body = new MockWireOutFileMessage($this->configuration->getAppHandle(), $userHandle, $transactionId, $wireStatus);[m
[32m+[m[32m        $path = ApiEndpoints::MOCK_WIRE_OUT_FILE;[m
[32m+[m[32m        $json = $this->serializer->serialize($body, 'json');[m
[32m+[m[32m        $headers = $this->makeHeaders($json, $userPrivateKey);[m
[32m+[m[32m        $response = $this->configuration->getApiClient()->callApi($path, $json, $headers);[m
[32m+[m[32m        return $this->prepareResponse($response, MockWireOutFileResponse::class);[m
[32m+[m[32m    }[m
[32m+[m
     /**[m
      * @param int|null $page[m
      * @param int|null $perPage[m
[1mdiff --git a/lib/Domain/AchType.php b/lib/Domain/AchType.php[m
[1mindex c02d9a0..25769c5 100644[m
[1m--- a/lib/Domain/AchType.php[m
[1m+++ b/lib/Domain/AchType.php[m
[36m@@ -23,4 +23,5 @@[m [mclass AchType extends Enum[m
     public const INSTANT  = 'INSTANT_ACH';[m
     public const CARD     = 'CARD';[m
     public const INSTANT_SETTLEMENT  = 'INSTANT_SETTLEMENT';[m
[32m+[m[32m    public const WIRE  = 'WIRE';[m
 }[m
[1mdiff --git a/lib/Domain/ApiEndpoints.php b/lib/Domain/ApiEndpoints.php[m
[1mindex 39d7916..d34a0bb 100644[m
[1m--- a/lib/Domain/ApiEndpoints.php[m
[1m+++ b/lib/Domain/ApiEndpoints.php[m
[36m@@ -15,6 +15,7 @@[m [mnamespace Silamoney\Client\Domain;[m
  */[m
 class ApiEndpoints[m
 {[m
[32m+[m[32m    public const APPROVE_WIRE = "/approve_wire";[m
     public const CANCEL_TRANSACTION = "/cancel_transaction";[m
     public const CERTIFY_BENEFICIAL_OWNER = "/certify_beneficial_owner";[m
     public const CERTIFY_BUSINESS = "/certify_business";[m
[36m@@ -53,6 +54,7 @@[m [mclass ApiEndpoints[m
     public const LINK_BUSINESS_MEMBER = "/link_business_member";[m
     public const LINK_CARD = "/link_card";[m
     public const LIST_DOCUMENTS = "/list_documents";[m
[32m+[m[32m    public const MOCK_WIRE_OUT_FILE = "/mock_wire_out_file";[m
     public const OPEN_VIRTUAL_ACCOUNT = "/open_virtual_account";[m
     public const PLAID_LINK_TOKEN = "/plaid_link_token";[m
     public const PLAID_SAMEDAY_AUTH = "/plaid_sameday_auth";[m
[1mdiff --git a/lib/Domain/BankAccountMessage.php b/lib/Domain/BankAccountMessage.php[m
[1mindex 0fc10d9..89174a6 100644[m
[1m--- a/lib/Domain/BankAccountMessage.php[m
[1m+++ b/lib/Domain/BankAccountMessage.php[m
[36m@@ -79,6 +79,12 @@[m [mclass BankAccountMessage implements ValidInterface[m
      */[m
     private $destinationId;[m
 [m
[32m+[m[32m    /**[m
[32m+[m[32m     * @var string[m
[32m+[m[32m     * @Type("string")[m
[32m+[m[32m     */[m
[32m+[m[32m    private $mockWireAccountName;[m
[32m+[m
     /**[m
      * Constructor for BankAccountMessage object.[m
      *[m
[36m@@ -93,6 +99,7 @@[m [mclass BankAccountMessage implements ValidInterface[m
      * @param string|null $cardName[m
      * @param string|null $sourceId[m
      * @param string|null $destinationId[m
[32m+[m[32m     * @param string|null $mockWireAccountName[m
      */[m
     public function __construct([m
         string $userHandle,[m
[36m@@ -105,7 +112,8 @@[m [mclass BankAccountMessage implements ValidInterface[m
         AchType $processingType = null,[m
         string $cardName = null,[m
         string $sourceId = null,[m
[31m-        string $destinationId = null[m
[32m+[m[32m        string $destinationId = null,[m
[32m+[m[32m        string $mockWireAccountName = null[m
     ) {[m
         $this->header = new Header($appHandle, $userHandle);[m
         $this->amount = $amount;[m
[36m@@ -123,6 +131,7 @@[m [mclass BankAccountMessage implements ValidInterface[m
         $this->processingType = $processingType;[m
         $this->sourceId = $sourceId;[m
         $this->destinationId = $destinationId;[m
[32m+[m[32m        $this->mockWireAccountName = $mockWireAccountName;[m
     }[m
 [m
     public function isValid(): bool[m
[1mdiff --git a/lib/Domain/Transaction.php b/lib/Domain/Transaction.php[m
[1mindex c3bda68..abc041a 100644[m
[1m--- a/lib/Domain/Transaction.php[m
[1m+++ b/lib/Domain/Transaction.php[m
[36m@@ -298,4 +298,32 @@[m [mclass Transaction[m
      * @Type("string")[m
      */[m
     public $secCode;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * String field used for the IMAD.[m
[32m+[m[32m     * @var string[m
[32m+[m[32m     * @Type("string")[m
[32m+[m[32m     */[m
[32m+[m[32m    public $IMAD;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * String field used for the OMAD.[m
[32m+[m[32m     * @var string[m
[32m+[m[32m     * @Type("string")[m
[32m+[m[32m     */[m
[32m+[m[32m    public $OMAD;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * String field used for the provider_tx_id.[m
[32m+[m[32m     * @var string[m
[32m+[m[32m     * @Type("string")[m
[32m+[m[32m     */[m
[32m+[m[32m    public $providerTxId;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * String field used for the provider_status.[m
[32m+[m[32m     * @var string[m
[32m+[m[32m     * @Type("string")[m
[32m+[m[32m     */[m
[32m+[m[32m    public $providerStatus;[m
 }[m
[1mdiff --git a/lib/Domain/TransactionStatus.php b/lib/Domain/TransactionStatus.php[m
[1mindex 107808f..421c07e 100644[m
[1m--- a/lib/Domain/TransactionStatus.php[m
[1m+++ b/lib/Domain/TransactionStatus.php[m
[36m@@ -52,4 +52,11 @@[m [mclass TransactionStatus[m
      * @Type("string")[m
      */[m
     public $tokenStatus;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * String field used for the provider_status.[m
[32m+[m[32m     * @var string[m
[32m+[m[32m     * @Type("string")[m
[32m+[m[32m     */[m
[32m+[m[32m    public $providerStatus;[m
 }[m
[1mdiff --git a/test/Api/IssueSilaTest.php b/test/Api/IssueSilaTest.php[m
[1mindex dab3ea5..5ea226c 100644[m
[1m--- a/test/Api/IssueSilaTest.php[m
[1m+++ b/test/Api/IssueSilaTest.php[m
[36m@@ -186,4 +186,104 @@[m [mclass IssueSilaTest extends TestCase[m
         $this->assertTrue($success);[m
         $this->assertEquals('success', $status);[m
     }[m
[32m+[m
[32m+[m
[32m+[m[32m    public function testIssueSila200Wire()[m
[32m+[m[32m    {[m
[32m+[m[32m        $response = self::$config->api->issueSila([m
[32m+[m[32m            DefaultConfig::$firstUserHandle,[m
[32m+[m[32m            55000,[m
[32m+[m[32m            DefaultConfig::DEFAULT_ACCOUNT,[m
[32m+[m[32m            DefaultConfig::$firstUserWallet->getPrivateKey(),[m
[32m+[m[32m            null,[m
[32m+[m[32m            DefaultConfig::VALID_BUSINESS_UUID[m
[32m+[m[32m        );[m
[32m+[m[41m        [m
[32m+[m[32m        $issueTransactionId = $response->getData()->getTransactionId();[m
[32m+[m[32m        $filters = new SearchFilters();[m
[32m+[m[32m        $filters->setTransactionId($issueTransactionId);[m
[32m+[m[32m        do {[m
[32m+[m[32m            $responseTrans = self::$config->api->getTransactions(DefaultConfig::$firstUserHandle, $filters, DefaultConfig::$firstUserWallet->getPrivateKey());[m
[32m+[m[32m            $statusCode = $responseTrans->getStatusCode();[m
[32m+[m[32m            $success = $responseTrans->getData()->success;[m
[32m+[m[32m            $status = $responseTrans->getData()->transactions[0]->status;[m
[32m+[m[32m            sleep(30);[m
[32m+[m[32m            echo '.';[m
[32m+[m[32m        } while ($statusCode == 200 && $success && ($status === 'pending' || $status === 'queued'));[m
[32m+[m
[32m+[m[32m        $businessUuid = "25e77968-1ca3-4a4b-8e72-506dcac20dc7"; //DefaultConfig::VALID_BUSINESS_UUID[m
[32m+[m[32m        $processingType = AchType::WIRE();[m
[32m+[m[32m        $mockWireAccountName = "mock_account_success";[m
[32m+[m[32m        $responseRedeem = self::$config->api->redeemSila([m
[32m+[m[32m            DefaultConfig::$firstUserHandle,[m
[32m+[m[32m            50000,[m
[32m+[m[32m            DefaultConfig::DEFAULT_ACCOUNT,[m
[32m+[m[32m            DefaultConfig::$firstUserWallet->getPrivateKey(),[m
[32m+[m[32m            null,[m
[32m+[m[32m            $businessUuid,[m
[32m+[m[32m            $processingType,[m
[32m+[m[32m            null,[m
[32m+[m[32m            null,[m
[32m+[m[32m            null,[m
[32m+[m[32m            $mockWireAccountName[m
[32m+[m[32m        );[m
[32m+[m
[32m+[m[32m        $redeemTransactionId = $responseRedeem->getData()->getTransactionId();[m
[32m+[m
[32m+[m[32m        $approve = true;[m
[32m+[m[32m        $notes = "test notes...";[m
[32m+[m[32m        $mockWireAccountName = "mock_account_success";[m
[32m+[m[32m        $filters = new SearchFilters();[m
[32m+[m[32m        $filters->setTransactionId($redeemTransactionId);[m
[32m+[m
[32m+[m[32m        for ($i=0; $i <= 10; $i++) {[m
[32m+[m[32m            $responseTransaction = self::$config->api->getTransactions(DefaultConfig::$firstUserHandle, $filters, DefaultConfig::$firstUserWallet->getPrivateKey());[m
[32m+[m[32m            $data = $responseTransaction->getData();[m
[32m+[m[32m            if($data->transactions[0]->providerStatus == "pending_approval") {[m
[32m+[m[32m                break;[m
[32m+[m[32m            }[m
[32m+[m[32m            sleep(30);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        $responseApproveWire = self::$config->api->approveWire(DefaultConfig::$firstUserHandle, DefaultConfig::$firstUserWallet->getPrivateKey(), $redeemTransactionId, $approve, $notes, $mockWireAccountName);[m
[32m+[m
[32m+[m[32m        $businessUuid = "25e77968-1ca3-4a4b-8e72-506dcac20dc7"; //DefaultConfig::VALID_BUSINESS_UUID[m
[32m+[m[32m        $processingType = AchType::WIRE();[m
[32m+[m[32m        $mockWireAccountName = "mock_account_success";[m
[32m+[m[32m        $responseRedeem2 = self::$config->api->redeemSila([m
[32m+[m[32m            DefaultConfig::$firstUserHandle,[m
[32m+[m[32m            5000,[m
[32m+[m[32m            DefaultConfig::DEFAULT_ACCOUNT,[m
[32m+[m[32m            DefaultConfig::$firstUserWallet->getPrivateKey(),[m
[32m+[m[32m            null,[m
[32m+[m[32m            $businessUuid,[m
[32m+[m[32m            $processingType,[m
[32m+[m[32m            null,[m
[32m+[m[32m            null,[m
[32m+[m[32m            null,[m
[32m+[m[32m            $mockWireAccountName[m
[32m+[m[32m        );[m
[32m+[m
[32m+[m[32m        $redeemTransactionId2 = $responseRedeem2->getData()->getTransactionId();[m
[32m+[m
[32m+[m[32m        $filters = new SearchFilters();[m
[32m+[m[32m        $filters->setTransactionId($redeemTransactionId2);[m
[32m+[m[32m        for ($i=0; $i <= 10; $i++) {[m
[32m+[m[32m            $responseTransaction = self::$config->api->getTransactions(DefaultConfig::$firstUserHandle, $filters, DefaultConfig::$firstUserWallet->getPrivateKey());[m
[32m+[m[32m            $data = $responseTransaction->getData();[m
[32m+[m[32m            if($data->transactions[0]->providerStatus == "pending_approval") {[m
[32m+[m[32m                break;[m
[32m+[m[32m            }[m
[32m+[m[32m            sleep(30);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        $responseMockWireOutFile = self::$config->api->mockWireOutFile(DefaultConfig::$firstUserHandle, DefaultConfig::$firstUserWallet->getPrivateKey(), $redeemTransactionId2, "PR");[m
[32m+[m
[32m+[m[32m        $this->assertEquals(200, $response->getStatusCode());[m
[32m+[m[32m        $this->assertEquals(200, $responseRedeem->getStatusCode());[m
[32m+[m[32m        $this->assertEquals(200, $responseApproveWire->getStatusCode());[m
[32m+[m[32m        $this->assertEquals(200, $responseRedeem2->getStatusCode());[m
[32m+[m[32m        $this->assertEquals(200, $responseMockWireOutFile->getStatusCode());[m
[32m+[m[32m    }[m
[32m+[m
 }[m
